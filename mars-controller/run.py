'''
ark9719
6/17/2016
'''
import logging
import sys
import time
import os.path
import json
from collections import namedtuple
from System import System

#Assumes that the server handeled validation
def parseConfig(json_string):
    config = json.loads(json_string, object_hook=lambda configObject: namedtuple('X', configObject.keys())(*configObject.values()))
    return config

def initOutput(config, q = None):
    """
    Create the output/timestamp directory for the files generated by this run (log/telemetry)
    :param config:
    :return:
    """
    t = time.localtime()
    timestamp = time.strftime('%b-%d-%Y_%H%M%S', t)

    if not os.path.exists(config.logging.output_path + '/output/' + config.logging.log_name + '-'+ timestamp + '/'):
        os.makedirs(config.logging.output_path + '/output/' + config.logging.log_name + '-' + timestamp + '/')

    logger = logging.getLogger()
    logger.setLevel(logging.INFO)

    # create debug file handler and set level to debug
    handler = logging.FileHandler(os.path.join(config.logging.output_path + '/output/' + config.logging.log_name + '-' + timestamp + '/', "log.txt"),"w")
    handler.setLevel(logging.INFO)
    formatter = logging.Formatter("%(levelname)s - %(message)s")
    handler.setFormatter(formatter)
    logger.addHandler(handler)

    if (os.path.isfile(config.logging.output_path + '/output/' + config.logging.log_name + '-' + timestamp + '/' + config.logging.log_name + '_machine_log.csv')):
        logging.debug("The telemetry output file you specified in the configuration file already exists.")
        logging.debug("The statistics from the previous reads will be overwritten if you don't specify a new file.")
        logging.debug("Do you wish to continue?")
        if(q is not None):
            answer = q.get()
        else:
            answer = raw_input("y/n:")
        if answer.lower() in ('n', 'no'):
            logging.debug("The program will terminate ")
            sys.exit()

    return timestamp


def run(json_string, q = None):
    logging.debug('Reading in settings and configurations')
    config = parseConfig(json_string)

    logging.debug("Preparing output directories")
    timestamp = initOutput(config, q)

    System(config, timestamp, q)

def parseObject(jsonObject):
    with open(jsonObject) as f:
        json_string = "".join(line.strip() for line in f)

    return json_string

def main():
    if len(sys.argv) != 2:
        print('Incorrect arguments, please specify a json string or object with which to load configuration')
        print('\tUsage: run.py json_string')
        print('\tUsage: run.py object.json')
        return

    sys.argv.pop(0)
    print (sys.argv)
    if sys.argv[0].lower().endswith('.json'):
        logging.debug('Reading in settings and configurations')
        with open(sys.argv[0]) as f:
            configs = f.read().splitlines()
        configString =""
        for i in configs:
            configString = configString + i
        json_string = configString.replace(" ", "")
        run(json_string)
    else:
        json_string = ''.join(sys.argv)
        run(json_string)


main()

